/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 *		Node() : data(0), next(nullptr) {};
 *		Node(int x) : data(x), next(nullptr) {}
 *		Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node* segregateEvenOdd(Node* head)
{
    if(head->next==NULL){
        return head;
    }

    Node* evenHead=NULL;
    Node* oddHead=NULL;
    Node* evenTail=NULL;
    Node* oddTail=NULL;
    Node* current = head;


   while(current){
       if(current->data % 2 == 0){
           if(!evenHead){
               evenHead=evenTail=current;
           }
           else{
               evenTail->next=current;
               evenTail=evenTail->next;
           }
       }
       else{
           if(!oddHead){
               oddHead=oddTail=current;
           }
           else{
               oddTail->next=current;
               oddTail=oddTail->next;
           }
       }

       current=current->next;
   }

   if(!evenHead){
       return oddHead;
   }

   evenTail->next = oddHead;

   if(oddTail){
       oddTail->next = NULL;
   }

   return evenHead;

   


}
